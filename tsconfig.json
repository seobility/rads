{
    "compilerOptions": {
        "module": "CommonJS", // Определяет тип импорта кода в итоговом файле, прописанном в "outFile".
        "lib": ["ESNext", "DOM"], // Набор библиотечных файлов полифилов, которые будут включены в итоговый выходной файл.
        "jsx": "react", // Включать ли поддержку ".tsx" файлов?
        "allowJs": true, // Разрешать компилировать файлы с JavaScript-кодом?
        "skipLibCheck": false,
        "alwaysStrict": false, // Компилировать ли каждый файл в строгом режиме и создавать ли 'use strict' для каждого выходного файла?
        "pretty": true, // Окрашивать в терминале сообщения об ошибках.
        "removeComments": true, // Удалить все комментарии из итогового файла.
        "sourceMap": true, // Создавать ли соответствующие source map файлы ".map"?
        "target": "es6", // Тип кода создаваемого итогового файла.
        "allowSyntheticDefaultImports": true, // Разрешить импортировать модули не имеющие внутри себя "import default"?
        "esModuleInterop": true, // Создать хелперы __importStar и __importDefault для обеспечения совместимости с экосистемой Babel и включить allowSyntheticDefaultImports для совместимости с системой типов.
        //
        // Hell-mode - comment it
        // "isolatedModules": true, // Обрабатывать каждый файл, как отдельный изолированный модуль.
        // "noUnusedLocals": true, // Показывать ошибку, если где-то найдены неиспользуемые локальные значения.
        // "noUnusedParameters": true, // Показывать ошибку, если где-то найдены неиспользуемые параметры.
        // "strict": true, // Включить ли все строги проверки типов сразу: noImplicitAny, noImplicitThis, alwaysStrict, strictNullChecks, strictFunctionTypes, strictPropertyInitialization?
        // "allowUnreachableCode": true, // Сообщить об ошибке в случае обнаружения кода, который никогда не будет выполнен?
        // "noFallthroughCasesInSwitch": true, // Сообщить об ошибке в случае обнаружения проваливания в конструкции switch-case?
        // "noImplicitReturns": true, // Сообщить об ошибке, когда не все пути кода в функции возвращают значение?
        //
        //
        //
        "baseUrl": "./dev",
        "paths": {
            "Img/*": ["dev/img/*"],
            "Svg/*": ["dev/img/svg/*"],
            "Js/*": ["dev/js/*"],
            "Css/*": ["dev/css/*"]
        }
    },
    "include": ["./dev/js/**/*.d.ts", "./dev/js/**/*.ts", "./dev/js/**/*.tsx"],
    "exclude": ["./node_modules"]
}
